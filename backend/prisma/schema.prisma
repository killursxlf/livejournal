// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String?
  username          String            @unique
  password          String            @db.VarChar(255)
  bio               String?
  avatar            String?
  createdAt         DateTime          @default(now())
  
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  complaints        Complaint[]
  
  following         Follows[]         @relation("following")
  followers         Follows[]         @relation("followers")
  savedPosts        SavedPost[]
  
  chatParticipants  ChatParticipant[]
  messages          Message[]
}

model Chat {
  id            String   @id @default(uuid())
  type          ChatType
  createdAt     DateTime @default(now())
  
  messages      Message[]
  participants  ChatParticipant[]
}

model Message {
  id              String   @id @default(uuid())
  chatId          String
  senderId        String
  content         String
  createdAt       DateTime @default(now())
  
  chat            Chat     @relation(fields: [chatId], references: [id])
  sender          User     @relation(fields: [senderId], references: [id])
  
  forwardedFromId String?
  isRead          Boolean  @default(false)
  forwardedFrom   Message? @relation("ForwardedMessages", fields: [forwardedFromId], references: [id])
  forwardedTo     Message[] @relation("ForwardedMessages")
  
  @@index([chatId])
}

model ChatParticipant {
  userId String
  chatId String
  
  user  User @relation(fields: [userId], references: [id])
  chat  Chat @relation(fields: [chatId], references: [id])
  
  @@id([userId, chatId])
}

enum ChatType {
  PRIVATE
  GROUP
}

model Post {
  id                String           @id @default(uuid())
  title             String
  content           String?
  authorId          String
  author            User             @relation(fields: [authorId], references: [id])
  status            PostStatus       @default(DRAFT)
  publicationType   PublicationType  @default(ARTICLE)
  postVersions      PostVersion[]
  publishAt         DateTime?
  
  postTags          PostTag[]
  likes             Like[]
  comments          Comment[]
  complaints        Complaint[]
  createdAt         DateTime         @default(now())
  savedBy           SavedPost[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  
  postTags  PostTag[]
}

model PostTag {
  postId String
  tagId  String
  
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])
  
  @@id([postId, tagId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([postId, userId])
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  postId     String
  userId     String
  createdAt  DateTime  @default(now())
  
  post       Post      @relation(fields: [postId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  complaints Complaint[]
}

model Follows {
  followerId  String
  followingId String
  
  follower    User @relation("following", fields: [followerId], references: [id])
  following   User @relation("followers", fields: [followingId], references: [id])
  
  @@id([followerId, followingId])
}

model SavedPost {
  userId String
  postId String
  
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  
  @@id([userId, postId])
}

model PostVersion {
  id        String   @id @default(uuid())
  postId    String
  title     String
  content   String?
  editorId  String?   // если нужно хранить, кто редактировал
  createdAt DateTime  @default(now())
  
  post      Post     @relation(fields: [postId], references: [id])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum PublicationType {
  ARTICLE
  NEWS
  REVIEW
}

model Notification {
  id           String   @id @default(uuid())
  type         String
  senderId     String
  recipientId  String
  postId       String?
  message      String
  createdAt    DateTime @default(now())
  isRead       Boolean  @default(false)
}

model Complaint {
  id          String           @id @default(uuid())
  reason      String
  description String?
  status      ComplaintStatus  @default(NEW)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  postId      String?
  commentId   String?
  
  userId      String
  
  user        User      @relation(fields: [userId], references: [id])
  post        Post?     @relation(fields: [postId], references: [id])
  comment     Comment?  @relation(fields: [commentId], references: [id])
}

enum ComplaintStatus {
  NEW
  REVIEWED
  REJECTED
}
