import prisma from "../prisma";
import { corsHeaders } from "../utils/cors";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export async function getUser(req: Request) {
    const url = new URL(req.url);
    const email = url.searchParams.get("email");
    const username = url.searchParams.get("username");
  
    if (!email && !username) {
      return new Response(JSON.stringify({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ username" }), {
        status: 400,
        headers: corsHeaders(),
      });
    }
  
    // ‚úÖ –§–∏–∫—Å–∏–º –æ—à–∏–±–∫—É - –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ `string`, —É–±–∏—Ä–∞–µ–º `null`
    const whereCondition = email
      ? { email }
      : username
      ? { username: username as string } // üëà –ü—Ä–∏–≤–æ–¥–∏–º –∫ `string`
      : undefined;
  
    if (!whereCondition) {
      return new Response(JSON.stringify({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å" }), {
        status: 400,
        headers: corsHeaders(),
      });
    }
  
    try {
      // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ—Å—Ç—ã
      const user = await prisma.user.findUnique({
        where: whereCondition,
        include: { 
          posts: { 
            include: { 
              postTags: { 
                include: { tag: true } 
              } 
            } 
          } 
        }, 
      });
  
      if (!user) {
        return new Response(JSON.stringify({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }), {
          status: 404,
          headers: corsHeaders(),
        });
      }
  
      return new Response(JSON.stringify(user), {
        headers: corsHeaders(),
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }), {
        status: 500,
        headers: corsHeaders(),
      });
    }
}

export async function getCurrentUser(req: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—É–∫–∞–º–∏
    const cookieHeader = req.headers.get("Cookie");
    if (!cookieHeader) {
      return new Response(JSON.stringify({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }), { status: 401 });
    }

    // –ü–∞—Ä—Å–∏–º –∫—É–∫–∏ –∏ –¥–æ—Å—Ç–∞—ë–º —Ç–æ–∫–µ–Ω
    const cookies = Object.fromEntries(cookieHeader.split("; ").map(c => c.split("=")));
    const token = cookies["token"];

    if (!token) {
      return new Response(JSON.stringify({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }), { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, process.env.JWT_SECRET!);

    return new Response(JSON.stringify(decoded), { status: 200 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ error —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error
    const errorMessage = error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";

    return new Response(JSON.stringify({ error: errorMessage }), { status: 401 });
  }
}


export async function completeProfile(req: Request) {
  try {
    const { email, name, username, password } = await req.json();

    if (!email || !username || !password) {
      return new Response(JSON.stringify({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }), {
        status: 400,
        headers: corsHeaders(),
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ –∑–∞–Ω—è—Ç
    const existingUser = await prisma.user.findUnique({ where: { username } });
    if (existingUser) {
      return new Response(
        JSON.stringify({ error: "–≠—Ç–æ—Ç @username —É–∂–µ –∑–∞–Ω—è—Ç" }),
        {
          status: 400,
          headers: corsHeaders(),
        }
      );
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    let user = await prisma.user.findUnique({ where: { email } });

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await prisma.user.update({
        where: { email },
        data: {
          name,
          username,
          password: hashedPassword, // <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à
        },
      });
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await prisma.user.create({
        data: {
          email,
          name,
          username,
          password: hashedPassword, // <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à
        },
      });
    }

    return new Response(
      JSON.stringify({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", user }),
      {
        headers: corsHeaders(),
      }
    );
  
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" }), {
      status: 500,
      headers: corsHeaders(),
    });
  }
}


export async function updateProfile(req: Request) {
  try {
    const { email, name, bio } = await req.json();

    const updateData: { name?: string; bio?: string } = {};
    if (name !== undefined) updateData.name = name;
    if (bio !== undefined) updateData.bio = bio;

    if (!Object.keys(updateData).length) {
      return new Response(JSON.stringify({ error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }), { status: 400 });
    }

    await prisma.user.update({
      where: { email },
      data: updateData,
    });

    return new Response(JSON.stringify({ message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω" }), {
      headers: corsHeaders(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
    return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" }), { status: 500 });
  }
}

export async function uploadAvatar(req: Request) {
    try {
      const formData = await req.formData();
      const file = formData.get("avatar");
      const email = formData.get("email");
  
      if (!file || !(file instanceof File)) {
        return new Response(JSON.stringify({ error: "–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }), {
          status: 400,
          headers: corsHeaders(),
        });
      }
  
      if (!email || typeof email !== "string") {
        return new Response(JSON.stringify({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }), {
          status: 400,
          headers: corsHeaders(),
        });
      }
  
      const fileExtension = file.name.split(".").pop();
      const fileName = `avatar_${Date.now()}.${fileExtension}`;
      const filePath = `/uploads/${fileName}`;
  
      await Bun.write(`./public${filePath}`, file);
  
      await prisma.user.update({
        where: { email },
        data: { avatar: `http://localhost:3000${filePath}` }, // ‚úÖ –ü–æ–ª–Ω—ã–π URL —Ñ–∞–π–ª–∞
      });
  
      return new Response(JSON.stringify({ avatarUrl: `http://localhost:3000${filePath}` }), {
        headers: corsHeaders(),
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
      return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" }), {
        status: 500,
        headers: corsHeaders(),
      });
    }
}
  

export async function getUserWithPosts(req: Request) {
    const url = new URL(req.url);
    const username = url.searchParams.get("username");
  
    if (!username) {
      return new Response(JSON.stringify({ error: "Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }), {
        status: 400,
        headers: corsHeaders(),
      });
    }
  
    const user = await prisma.user.findUnique({
      where: { username },
      include: { posts: true },
    });
  
    if (!user) {
      return new Response(JSON.stringify({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }), {
        status: 404,
        headers: corsHeaders(),
      });
    }
  
    return new Response(JSON.stringify(user), {
      headers: corsHeaders(),
    });
}

export async function createPost(req: Request) {
  try {
    const { title, content, email, tags } = await req.json();

    if (!title || !content || !email) {
      return new Response(JSON.stringify({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }), {
        status: 400,
        headers: corsHeaders(),
      });
    }

    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return new Response(
        JSON.stringify({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }),
        { status: 404, headers: corsHeaders() }
      );
    }

    const tagsData = (tags || []).map((tagName: string) => ({
      tag: {
        connectOrCreate: {
          where: { name: tagName.toLowerCase() },
          create: { name: tagName.toLowerCase() },
        },
      },
    }));

  
    const post = await prisma.post.create({
      data: {
        title,
        content,
        authorId: user.id,
        postTags: {
          create: tagsData,
        },
      },
      include: {
        postTags: {
          include: { tag: true },
        },
      },
    });

    return new Response(
      JSON.stringify({ message: "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞", post }),
      { headers: corsHeaders() }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:", error);
    return new Response(
      JSON.stringify({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞" }),
      { status: 500 }
    );
  }
}
