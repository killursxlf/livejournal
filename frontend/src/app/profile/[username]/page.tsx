"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import Link from "next/link";

export default function UserProfile() {
  const { username } = useParams();
  const { data: session } = useSession();
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [isOwner, setIsOwner] = useState(false);
  const [error, setError] = useState("");

  // üëâ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
  const [showCreatePostForm, setShowCreatePostForm] = useState(false);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [tagsInput, setTagsInput] = useState(""); // –¢–µ–≥–∏, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  const [postError, setPostError] = useState("");
  const [creatingPost, setCreatingPost] = useState(false);

  useEffect(() => {
    if (username) {
      const decodedUsername = decodeURIComponent(username as string);

      fetch(`http://localhost:3000/api/user?username=${decodedUsername}`)
        .then((res) => res.json())
        .then((data) => {
          if (data.error) {
            setError(data.error);
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if (data.avatar && !data.avatar.startsWith("http")) {
              data.avatar = `http://localhost:3000${data.avatar}`;
            }

            setUser(data);

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º session.user.email –∏ data.email
            if (session?.user?.email === data.email) {
              setIsOwner(true);
            }
          }
        })
        .catch(() => setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"));
    }
  }, [username, session]);

  // üëâ –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
  const handleToggleCreatePostForm = () => {
    setShowCreatePostForm((prev) => !prev);
  };

  // üëâ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleCreatePost = async (e: React.FormEvent) => {
    e.preventDefault();
    setCreatingPost(true);
    setPostError("");

    if (!session?.user?.email) {
      setPostError("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
      setCreatingPost(false);
      return;
    }

    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É "react, nextjs" –Ω–∞ –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
      // –ú–æ–∂–Ω–æ trim() + filter, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã/–ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const tagsArray = tagsInput
        .split(",")
        .map((t) => t.trim())
        .filter((t) => t.length > 0);

      const res = await fetch("http://localhost:3000/api/create-post", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title,
          content,
          email: session.user.email, // –∞–≤—Ç–æ—Ä
          tags: tagsArray, // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
        }),
      });

      const data = await res.json();

      if (!res.ok) {
        setPostError(data.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞");
      } else {
        // –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        const newPost = data.post;
        setUser((prev: any) => ({
          ...prev,
          posts: [newPost, ...(prev.posts || [])],
        }));
        // –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        setTitle("");
        setContent("");
        setTagsInput("");
        setShowCreatePostForm(false);
      }
    } catch (err) {
      setPostError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞");
    } finally {
      setCreatingPost(false);
    }
  };

  if (error) return <p className="text-red-500">{error}</p>;
  if (!user) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center space-x-4">
        {user.avatar ? (
          <img
            src={user.avatar}
            alt="–ê–≤–∞—Ç–∞—Ä"
            className="w-24 h-24 rounded-full border object-cover"
          />
        ) : (
          <div className="w-24 h-24 bg-gray-300 rounded-full flex items-center justify-center">
            <span className="text-gray-600">–ù–µ—Ç —Ñ–æ—Ç–æ</span>
          </div>
        )}
        <div>
          <h1 className="text-3xl font-bold">{user.name || user.username}</h1>
          <p className="text-sm text-gray-500">@{user.username}</p>
          <p className="text-gray-600 mt-2">{user.bio || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
        </div>
      </div>

      {isOwner && (
        <div className="mt-4">
          <Link href={`/profile/${username}/edit`}>
            <button className="bg-blue-600 text-white px-4 py-2 rounded">
              Edit Profile
            </button>
          </Link>

          {/* –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç" */}
          <button
            onClick={handleToggleCreatePostForm}
            className="ml-4 bg-green-600 text-white px-4 py-2 rounded"
          >
            –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
          </button>

          {/* –ï—Å–ª–∏ showCreatePostForm = true -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É */}
          {showCreatePostForm && (
            <div className="mt-6 bg-gray-100 p-4 rounded">
              <h2 className="text-xl font-semibold mb-2">–ù–æ–≤—ã–π –ø–æ—Å—Ç</h2>
              {postError && <p className="text-red-500 mb-2">{postError}</p>}
              <form onSubmit={handleCreatePost}>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                  className="block w-full p-2 border rounded mb-2"
                  required
                />
                <textarea
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ..."
                  className="block w-full p-2 border rounded mb-2"
                  rows={4}
                  required
                />
                <input
                  type="text"
                  value={tagsInput}
                  onChange={(e) => setTagsInput(e.target.value)}
                  placeholder="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                  className="block w-full p-2 border rounded mb-2"
                />
                <button
                  type="submit"
                  disabled={creatingPost}
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
                >
                  {creatingPost ? "–û–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞–µ–º..." : "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç"}
                </button>
              </form>
            </div>
          )}
        </div>
      )}

      <h2 className="text-2xl font-semibold mt-6">–ü—É–±–ª–∏–∫–∞—Ü–∏–∏</h2>
      {user.posts?.length > 0 ? (
        <div className="mt-4">
          {user.posts.map((post: any) => (
            <div key={post.id} className="border p-4 rounded mt-2">
              <h3 className="text-lg font-bold">{post.title}</h3>
              <p>{post.content}</p>
              {/* –ï—Å–ª–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ç–µ–≥–∏, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ */}
              {post.postTags?.length > 0 && (
                <div className="mt-1 text-sm text-gray-600">
                  –¢–µ–≥–∏:{" "}
                  {post.postTags.map((pt: any) => pt.tag.name).join(", ")}
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <p className="text-gray-500 mt-4">–ü–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π.</p>
      )}
    </div>
  );
}
